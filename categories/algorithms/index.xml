<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Cyan&#39;s Blog</title>
    <link>https://cyasts.github.io/categories/algorithms/</link>
    <description>Recent content in Algorithms on Cyan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 26 Oct 2020 22:38:36 +0800</lastBuildDate><atom:link href="https://cyasts.github.io/categories/algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图的广度优先遍历和Dijkstra算法</title>
      <link>https://cyasts.github.io/p/graph/</link>
      <pubDate>Mon, 26 Oct 2020 22:38:36 +0800</pubDate>
      
      <guid>https://cyasts.github.io/p/graph/</guid>
      <description>1.问题描述 构建成都地铁图，实现广度优先算法和 Dijkstra 算法
2.输入 1.地铁图的输入 以线路号数开头，后面是该号线以此的站点数。每行一个数据。
由于地铁中存在着环线，所以图的构建可能会成一个环。因此在输入的时候需要特别处理，把线路数乘以 10 再加上一个是否为环线，这样得到数字后取最后一位就知道是否为环线，再除以 10 就知道是几号线。例如 1 号线不是环线就变成 10，7 号线为环线就变成 71。
最后以-1 为单独的一行，表示输入结束。 输入举例：
10
韦家碾
火车北站
人民北路
&amp;hellip;
广州路
兴隆湖
科学城
20
犀浦
天河路
百草路
&amp;hellip;
71
火车北站
&amp;hellip;
-1
2.测试站点的输入 输入两行，每行一个站点。
如：
石油大学
理工大学
3.输出 1.按照广度优先算法输出两个站的最短节点数路径。
2.模拟两个站点之间的线路距离权重，输出两个站点之间的最短路径。
4.数据结构 由于地铁图属于稀疏图，所以采用邻接链表来存储图。 graph.h 头文件：
#ifndef GRAPH_H_INCLUDE #define GRAPH_H_INCLUDE #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; typedef struct edge{ int weight; int info; //线路名称 struct edge * nextedge; struct vertex * adjtex; } edge; typedef struct vertex { char site[20]; struct edge * firstedge; struct vertex * prev; //用来存储结果路径上的上一个节点 int info; //用来存储多余的数据 int isdiscovered; } vertex; typedef struct { vertex ** vertices; int vexnum, edgnum; }graph; //function declare graph * buildgraph(); vertex * findvertexbyname(graph * g, const char * name); void cleartags(graph * g); vertex * findmininfo(graph * g); #endif graph.</description>
    </item>
    
    <item>
      <title>稳定匹配问题</title>
      <link>https://cyasts.github.io/p/stablematche/</link>
      <pubDate>Wed, 16 Sep 2020 15:20:00 +0800</pubDate>
      
      <guid>https://cyasts.github.io/p/stablematche/</guid>
      <description>1.问题描述 给定 N 个男性 $ m_{1} $ ,⋯,$m_{n}$ 和 N 个女性$w_{1}$,⋯,$w_{n}$
每个男性对女性由最喜欢到最不喜欢进行排序 每个女性对男性由最喜欢到最不喜欢进行排序 目标：找到一个稳定的匹配使得不满意度最低。
2.输入 第一行输入 N，表示需要处理的匹配的对数。男性按照 1，2, 3&amp;hellip;N 的编号表示，女性同样如此。
接下来 N 行，每行 N 个数字，表示该行男性对所有女性的好感度排名。
再接下来 N 行，每行 N 个数字，表示该行女性对所有男性的好感度排名。
例如：
3 1 2 3 2 1 3 1 2 3 2 1 3 1 2 3 1 2 3 3.输出 输入 N 行，每行输出一个匹配的结果，格式为：
m：编号 w：编号 例如：
This is a block. This is more of a block. 4.核心思想 4.算法实现 #include &amp;lt;stdio.</description>
    </item>
    
  </channel>
</rss>
